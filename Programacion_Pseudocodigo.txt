LOGICA DE PROGRAMACION EN PSEUDOCODIGO 
--------------------------------------------------------------------------------------------
1) VARIABLES

DECLARAR O DEFINIR     	        Si tiene una palabra reservada o no y si es local o global.
INICIALIZAR                     Si es un contador.
VARIABLE                 	Asignamos un nombre.
TIPO DE DATO            	STR INT FLOAT BOLEAN
VALOR                   	Asignamos el valor de la variable.

Ejemplo: Dim Variable As Integer = 0

----------------------------------------------------------------------------------------------
2) OPERADORES

ARITMETICOS

SUMA          	 +
RESTA         	 -
MULTIPLICACION	 *
DIVISION      	 /
POTENCIA      	 **
RAIZ         	 sqrt()
MODULO O RESTO	 %

ASIGNACION

VARIABLE  =  <-
VARIABLE +=
VARIABLE -=
VARIABLE *=
VARIABLE /=

INCREMENTO Y DECREMENTO

VARIABLE++            	Incrementa de a uno.
VARIABLE--            	Incrementa de a uno.
++VARIABLE            	Incrementa de a uno antes de ser usada
--VARIABLE            	Decrementa de a uno antes de ser usada.

RELACIONALES

igual      	==
identidad  	===
distino    	!=
mayor      	>
menor      	<
mayor igual	>=
menor igual	<=

LOGICOS

AND   
OR    
NOT

CONCATENACION +

TERNARIOS


------------------------------------------------------------------------------------------------------------

3) ESTRUCTURAS DE CONTROL

CONDICIONALES

SIMPLES - IF

IF (Condition) THEN
    Instructions
ENDIF

DOBLES - IF-ELSE

IF (Condition) THEN
    Instructions
ELSE
    Instructions
ENDIF

MULTIPLES - IF-ELSEIF

IF (Condition) THEN
    Instructions
ELSEIF (Condition) THEN
    Instructions
ELSE
    Instructions
ENDIF
 
MULTIPLES - SELECT CASE

SELECT CASE VAR
    CASE VAR1:
        Instructions
    CASE VAR2:
        Instructions
    DEFAULT:
        Instructions
ENDSELECT


---LOOPS---


-------------------------------------------------------------

---FOR

FOR i IN List DO
    WRITE i Instructions    
ENDFOR

FOR i FROM Start TO End STEP N DO
    WRITE i Instructions    
ENDFOR

-------------------------------------------------------------

--WHILE CON CONTADOR

i <- 0
WHILE (i <= N) DO
      WRITE i Instructions
      i<- i + 1
ENDWHILE

-- WHILE SIN CONTADOR

A is equal to B

WHILE (A = B) DO
    Instructions
    A <- Get next value of A that is not equal to B
ENDWHILE

-- DO WHILE CON CONTADOR

i <- 0
DO 
   WRITE i Instructions
   i<- i + 1
WHILE (i <= N)

-- DO WHILE SIN CONTADOR

A is equal to B
DO
    Instructions
    A <- Get next value of A that is not equal to B
WHILE (A = B)

------------------------------------------------------

--UNTIL CON CONTADOR

i <- 0
UNTIL (i >= N) DO
      WRITE i Instructions
      i<- i + 1
ENDUNTIL


-- UNTIL SIN CONTADOR

A is not equal to B

UNTIL (A = B) DO
    Instructions
    A <- Get next value of A that is equal to B
ENDUNTIL

-- DO UNTIL CON CONTADOR

i <- 0
DO 
   WRITE i Instructions
   i<- i + 1
UNTIL (i >= N)

-- DO UNTIL SIN CONTADOR

A is not equal to B
DO
    Instructions
    A <- Get next value of A that is  equal to B
UNTIL (A = B)

-------------------------------------------------------

4) FUNCIONES

FUNCTION NAME(PARAMETERS) 
	Instructions
ENDFUNTION

NAME(ARGUMENTS)



FUNCTION NAME(PARAMETERS) 
	VALUE <- Instructions
	RETURN VALUE
ENDFUNTION

VARIABLE <- NAME(ARGUMENTS)
WRITE VARIABLE
 
--------------------------------------------------------

ARRAYS

DEFINE ARRAY, i AS INTEGER

DIM ARRAY[N]

ARRAY[0] <- N
ARRAY[1] <- N
ARRAY[2] <- N
ARRAY[3] <- N

WRITE ARRAY[1]

i <- N
VALUE <- ARRAY[i]
WRITE VALUE

-----------------------------------------------------------

CONJUNTOS

CLASES, OBJETOS









